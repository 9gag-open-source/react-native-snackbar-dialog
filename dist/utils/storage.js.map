{"version":3,"sources":["../../src/utils/storage.js"],"names":["STORAGE_NAMESPACE","KEY_CURRENT","KEY_QUEUE","Storage","getCurrent","JSON","getItem","parse","setCurrent","item","setItem","stringify","removeCurrent","removeItem","getItems","hasItems","queue","Array","isArray","length","addToQueue","hasQueue","concat","setQueue","items","tems"],"mappings":"wEAAA,yC;;AAEA,GAAMA,mBAAoB,UAA1B;AACA,GAAMC,aAAiBD,iBAAjB,WAAN;AACA,GAAME,WAAeF,iBAAf,SAAN,C;;AAEqBG,O,oDAAAA,O;AACZC,U,CAAa;AACXC,IADW,iDACM,0BAAaC,OAAb,CAAqBL,WAArB,CADN,+EACNM,KADM,yF,CADDJ,O;;;AAKZK,U,CAAa,kBAAOC,IAAP;AACL,0BAAaC,OAAb,CAAqBT,WAArB,CAAkCI,KAAKM,SAAL,CAAeF,IAAf,CAAlC,CADK,oH,CALDN,O;;;AASZS,a,CAAgB;AACR,0BAAaC,UAAb,CAAwBZ,WAAxB,CADQ,oH,CATJE,O;;;AAaZW,Q,CAAW;AACTT,IADS,kDACQ,0BAAaC,OAAb,CAAqBJ,SAArB,CADR,mFACJK,KADI,4F,CAbCJ,O;;;AAiBZY,Q,CAAW;AACFV,IADE,kDACe,0BAAaC,OAAb,CAAqBJ,SAArB,CADf,qCACVc,KADU,cACGT,KADH;AAETU,MAAMC,OAAN,CAAcF,KAAd,GAAwBA,MAAMG,MAFrB,4D,CAjBChB,O;;;AAsBZiB,U,CAAa,kBAAOX,IAAP;AACJJ,IADI,kDACa,0BAAaC,OAAb,CAAqBJ,SAArB,CADb,qCACZc,KADY,cACCT,KADD;AAEZc,QAFY,CAEDJ,MAAMC,OAAN,CAAcF,KAAd,GAAwBA,MAAMG,MAF7B;AAGZ,0BAAaT,OAAb,CAAqBR,SAArB,CAAgCG,KAAKM,SAAL,CAAeU,SAAWL,MAAMM,MAAN,CAAab,IAAb,CAAX,CAAgCA,IAA/C,CAAhC,CAHY,4D,CAtBDN,O;;;AA4BZoB,Q,CAAW,kBAAOC,KAAP;AACV,0BAAad,OAAb,CAAqBR,SAArB,CAAgCG,KAAKM,SAAL,CAAec,IAAf,CAAhC,CADU,4D,iBA5BCtB,O","file":"storage.js","sourcesContent":["import { AsyncStorage } from 'react-native'\n\nconst STORAGE_NAMESPACE = 'SNACKBAR'\nconst KEY_CURRENT = `${STORAGE_NAMESPACE}:CURRENT`\nconst KEY_QUEUE = `${STORAGE_NAMESPACE}:QUEUE`\n\nexport default class Storage {\n  static getCurrent = async () => {\n    return JSON.parse(await AsyncStorage.getItem(KEY_CURRENT))\n  }\n\n  static setCurrent = async (item) => {\n    return await AsyncStorage.setItem(KEY_CURRENT, JSON.stringify(item))\n  }\n\n  static removeCurrent = async () => {\n    return await AsyncStorage.removeItem(KEY_CURRENT)\n  }\n\n  static getItems = async () => {\n    return JSON.parse(await AsyncStorage.getItem(KEY_QUEUE))\n  }\n\n  static hasItems = async () => {\n    const queue = JSON.parse(await AsyncStorage.getItem(KEY_QUEUE))\n    return Array.isArray(queue) && queue.length\n  }\n\n  static addToQueue = async (item) => {\n    const queue = JSON.parse(await AsyncStorage.getItem(KEY_QUEUE))\n    const hasQueue = Array.isArray(queue) && queue.length\n    await AsyncStorage.setItem(KEY_QUEUE, JSON.stringify(hasQueue ? queue.concat(item) : item))\n  }\n\n  static setQueue = async (items) => {\n    await AsyncStorage.setItem(KEY_QUEUE, JSON.stringify(tems))\n  }\n}"]}