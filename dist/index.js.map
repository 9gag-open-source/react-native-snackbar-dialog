{"version":3,"sources":["../src/index.js"],"names":["SnackBar","add","props","getCurrent","currentElement","addToQueue","setCurrent","dismiss","console","warn","show","newElement","info","update","destroy","removeCurrent","getItems","queue","hasQueue","Array","isArray","length","currentProps","items","setQueue"],"mappings":"wSAAA,4B;AACA;AACA,mE;;AAEA,oC;AACA,wC;;AAEqBA,Q,sDAAAA,Q;AACZC,G,CAAM,iBAAOC,KAAP;;AAEoB,kBAAQC,UAAR,EAFpB,SAEHC,cAFG;;AAILA,cAJK;AAKD,kBAAQC,UAAR,CAAmBH,KAAnB,CALC;;;;AASH,kBAAQI,UAAR,CAAmB,sCAAiB,6DAAuBJ,KAAvB,EAA8B,UAAWK,OAAzC,GAAjB,CAAnB,CATG;;AAWTC,QAAQC,IAAR,cAXS,mE,CADMT,Q;;;;AAgBZU,I,CAAO,kBAAOR,KAAP;;AAEJS,UAFI,CAES,6DAAuBT,KAAvB,EAA8B,UAAWK,OAAzC,GAFT;AAGmB,kBAAQJ,UAAR,EAHnB,SAGJC,cAHI;AAIhBI,QAAQI,IAAR,CAAa,gBAAb,CAA+BR,cAA/B,EAJgB;AAKNA,cALM;AAMRA,eAAeS,MAAf,CAAsBF,UAAtB,EANQ;;;AAShBH,QAAQI,IAAR,CAAa,YAAb,EATgB;AAUJ,kBAAQN,UAAR,CAAmB,sCAAiBK,UAAjB,CAAnB,CAVI;;AAYVH,QAAQC,IAAR,eAZU,oE,CAhBKT,Q;;;;AAgCZO,O,CAAU;;AAEgB,kBAAQJ,UAAR,EAFhB,SAEPC,cAFO;;AAITA,cAJS;AAKXA,eAAeU,OAAf,GALW;AAML,kBAAQC,aAAR,EANK;;;AASO,kBAAQC,QAAR,EATP,UASPC,KATO;AAUPC,QAVO,CAUIC,MAAMC,OAAN,CAAcH,KAAd,GAAwBA,MAAMI,MAVlC;;AAYRH,QAZQ;;;;AAgBoBD,KAhBpB,EAgBNK,YAhBM,WAgBWC,KAhBX;AAiBP,kBAAQjB,UAAR,CAAmB,sCAAiB,6DAAuBgB,YAAvB,EAAqC,UAAWf,OAAhD,GAAjB,CAAnB,CAjBO;;AAmBbgB,MAAMF,MAnBO,8FAmBS,kBAAQG,QAAR,CAAiBD,KAAjB,CAnBT;;AAqBbf,QAAQC,IAAR,eArBa,oE,iBAhCET,Q","file":"index.js","sourcesContent":["import React from 'react'\nimport { AsyncStorage } from 'react-native'\nimport RootSiblings from 'react-native-root-siblings'\n\nimport SnackBarComponent from './SnackBar'\nimport Storage from './utils/storage'\n\nexport default class SnackBar {\n  static add = async (props): void => {\n    try {\n      const currentElement = await Storage.getCurrent()\n\n      if (currentElement) {\n        await Storage.addToQueue(props)\n        return\n      }\n\n      await Storage.setCurrent(new RootSiblings(<SnackBarComponent {...props} onDismiss={dismiss} />))\n    } catch (e) {\n      console.warn(e)\n    }\n  }\n\n  static show = async (props): void => {\n    try {\n      const newElement = <SnackBarComponent {...props} onDismiss={dismiss} />\n      const currentElement = await Storage.getCurrent()\nconsole.info('currentElement', currentElement)\n      if (currentElement) {\n        currentElement.update(newElement)\n        return\n      }\nconsole.info('setCurrent')\n      await Storage.setCurrent(new RootSiblings(newElement))\n    } catch (e) {\n      console.warn(e)\n    }\n  }\n\n  static dismiss = async (): void => {\n    try {\n      const currentElement = await Storage.getCurrent()\n\n      if (currentElement) {\n        currentElement.destroy()\n        await Storage.removeCurrent()\n      }\n\n      const queue = await Storage.getItems()\n      const hasQueue = Array.isArray(queue) && queue.length\n\n      if (!hasQueue) {\n        return\n      }\n\n      const [currentProps, ...items] = queue\n      await Storage.setCurrent(new RootSiblings(<SnackBarComponent {...currentProps} onDismiss={dismiss} />))\n\n      items.length && await Storage.setQueue(items)\n    } catch (e) {\n      console.warn(e)\n    }\n  }\n}"]}