{"version":3,"sources":["../src/index.js"],"names":["SnackBarManager","current","queue","Array","isArray","length","props","dismiss","_addCurrent","_removeCurrent","destroy","push","_updateCurrent","_hasQueue","shift"],"mappings":"uxBAAA,4B;AACA;AACA,mE;;AAEA,oC;;AAEqBA,e;AACnB,0BAAe;AACb,KAAKC,OAAL,CAAe,IAAf;AACA,KAAKC,KAAL,CAAa,EAAb;AACD,C;;AAEqB;AACpB,MAAOC,OAAMC,OAAN,CAAc,KAAKF,KAAnB,GAA6B,KAAKA,KAAL,CAAWG,MAA/C;AACD,C;;AAEYC,K,CAAwB;AACnC,KAAKL,OAAL,CAAe,sCAAiB,6DAAcK,KAAd,EAAqB,UAAW,KAAKC,OAArC,GAAjB,CAAf;AACA,MAAO,KAAP;AACD,C;;AAEeD,K,CAAwB;AACtC,GAAI,CAAC,KAAKL,OAAV,CAAmB;AACjB,MAAO,MAAKO,WAAL,CAAiBF,KAAjB,CAAP;AACD;;;;;AAKD,MAAO;AACJG,cADI;AAEJD,WAFI,CAEQF,KAFR,CAAP;AAGD,C;;AAEkC;AACjC,GAAI,CAAC,KAAKL,OAAV,CAAmB;AACjB,MAAO,KAAP;AACD;;AAED,KAAKA,OAAL,CAAaS,OAAb;AACA,KAAKT,OAAL,CAAe,IAAf;;AAEA,MAAO,KAAP;AACD,C;;AAEIK,K,CAAa;AAChB,GAAI,KAAKL,OAAT,CAAkB;AAChB,KAAKC,KAAL,CAAWS,IAAX,CAAgBL,KAAhB;AACA;AACD;;AAED,KAAKE,WAAL,CAAiBF,KAAjB;AACD,C;;AAEKA,K,CAAa;AACjB,KAAKM,cAAL,CAAoBN,KAApB;AACD,C;;AAEgB;AACf,KAAKG,cAAL;;AAEA,GAAI,CAAC,KAAKI,SAAL,EAAL,CAAuB;AACrB;AACD;;AAED,GAAMZ,SAAU,KAAKC,KAAL,CAAWY,KAAX,EAAhB;AACA,KAAKN,WAAL,CAAiBP,OAAjB;AACD,C,+CA7DkBD,e","file":"index.js","sourcesContent":["import React from 'react'\nimport { AsyncStorage } from 'react-native'\nimport RootSiblings from 'react-native-root-siblings'\n\nimport SnackBar from './SnackBar'\n\nexport default class SnackBarManager {\n  constructor () {\n    this.current = null\n    this.queue = []\n  }\n\n  _hasQueue (): boolean {\n    return Array.isArray(this.queue) && this.queue.length\n  }\n\n  _addCurrent (props): SnackBarManager {\n    this.current = new RootSiblings(<SnackBar {...props} onDismiss={this.dismiss} />)\n    return this\n  }\n\n  _updateCurrent (props): SnackBarManager {\n    if (!this.current) {\n      return this._addCurrent(props)\n    }\n\n    // Temporary disabled\n    // this.current.update(<SnackBar {...props} onDismiss={this.dismiss} />)\n\n    return this\n      ._removeCurrent()\n      ._addCurrent(props)\n  }\n\n  _removeCurrent (): SnackBarManager {\n    if (!this.current) {\n      return this\n    }\n\n    this.current.destroy()\n    this.current = null\n\n    return this\n  }\n\n  add (props): void {\n    if (this.current) {\n      this.queue.push(props)\n      return\n    }\n\n    this._addCurrent(props)\n  }\n\n  show (props): void {\n    this._updateCurrent(props)\n  }\n\n  dismiss (): void {\n    this._removeCurrent()\n\n    if (!this._hasQueue()) {\n      return\n    }\n\n    const current = this.queue.shift()\n    this._addCurrent(current)\n  }\n}"]}