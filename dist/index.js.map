{"version":3,"sources":["../src/index.js"],"names":["SnackBarManager","current","queue","Array","isArray","length","props","dismiss","isAnimated","_addCurrent","_removeCurrent","update","destroy","title","options","children","push","_updateCurrent","_hasQueue","shift"],"mappings":"uxBAAA,4B;AACA;AACA,mE;;;AAGA,oC;;AAEqBA,e;;;;AAInB,0BAAe;AACb,KAAKC,OAAL,CAAe,IAAf;AACA,KAAKC,KAAL,CAAa,EAAb;AACD,C;;AAEqB;AACpB,MAAOC,OAAMC,OAAN,CAAc,KAAKF,KAAnB,GAA6B,KAAKA,KAAL,CAAWG,MAA/C;AACD,C;;AAEYC,K,CAAuC;AAClD,KAAKL,OAAL,CAAe,sCAAiB,6DAAcK,KAAd,EAAqB,UAAW,KAAKC,OAArC,GAAjB,CAAf;AACA,MAAO,KAAP;AACD,C;;AAEeD,K,CAAoE,IAA9CE,WAA8C,2DAAxB,KAAwB;AAClF,GAAI,CAAC,KAAKP,OAAV,CAAmB;AACjB,MAAO,MAAKQ,WAAL,CAAiBH,KAAjB,CAAP;AACD;;AAED,GAAIE,UAAJ,CAAgB;AACd,MAAO;AACJE,cADI;AAEJD,WAFI,CAEQH,KAFR,CAAP;AAGD;;AAED,KAAKL,OAAL,CAAaU,MAAb,CAAoB,6DAAcL,KAAd,EAAqB,UAAW,KAAKC,OAArC,GAApB;AACA,MAAO,KAAP;AACD,C;;AAEkC;AACjC,GAAI,CAAC,KAAKN,OAAV,CAAmB;AACjB,MAAO,KAAP;AACD;;AAED,KAAKA,OAAL,CAAaW,OAAb;AACA,KAAKX,OAAL,CAAe,IAAf;;AAEA,MAAO,KAAP;AACD,C;;AAEK;AACJ,MAAO;AACLA,QAAS,KAAKA,OADT;AAELC,MAAO,KAAKA,KAFP,CAAP;;AAID,C;;AAEIW,K,CAAeC,O,CAA+B;AACjD,GAAMR,iBAAUS,SAAUF,KAApB,EAA8BC,OAA9B,CAAN;;AAEA,GAAI,KAAKb,OAAT,CAAkB;AAChB,KAAKC,KAAL,CAAWc,IAAX,CAAgBV,KAAhB;AACA;AACD;;AAED,KAAKG,WAAL,CAAiBH,KAAjB;AACD,C;;AAEKO,K,CAAeC,O,CAA+B;AAClD,KAAKG,cAAL,WAAsBF,SAAUF,KAAhC,EAA0CC,OAA1C;AACD,C;;AAEgB;AACf,KAAKJ,cAAL;;AAEA,GAAI,CAAC,KAAKQ,SAAL,EAAL,CAAuB;AACrB;AACD;;AAED,GAAMjB,SAAU,KAAKC,KAAL,CAAWiB,KAAX,EAAhB;AACA,KAAKV,WAAL,CAAiBR,OAAjB;AACD,C,+CA3EkBD,e","file":"index.js","sourcesContent":["import React from 'react'\nimport { AsyncStorage } from 'react-native'\nimport RootSiblings from 'react-native-root-siblings'\n\nimport type { SnackItemType } from './type'\nimport SnackBar from './SnackBar'\n\nexport default class SnackBarManager {\n  current: SnackItemType\n  queue: Array<SnackItemType>\n\n  constructor () {\n    this.current = null\n    this.queue = []\n  }\n\n  _hasQueue (): boolean {\n    return Array.isArray(this.queue) && this.queue.length\n  }\n\n  _addCurrent (props: SnackItemType): SnackBarManager {\n    this.current = new RootSiblings(<SnackBar {...props} onDismiss={this.dismiss} />)\n    return this\n  }\n\n  _updateCurrent (props: SnackItemType, isAnimated: boolean = false): SnackBarManager {\n    if (!this.current) {\n      return this._addCurrent(props)\n    }\n\n    if (isAnimated) {\n      return this\n        ._removeCurrent()\n        ._addCurrent(props)\n    }\n\n    this.current.update(<SnackBar {...props} onDismiss={this.dismiss} />)\n    return this\n  }\n\n  _removeCurrent (): SnackBarManager {\n    if (!this.current) {\n      return this\n    }\n\n    this.current.destroy()\n    this.current = null\n\n    return this\n  }\n\n  get() {\n    return {\n      current: this.current,\n      queue: this.queue\n    }\n  }\n\n  add (title: string, options?: SnackItemType): void {\n    const props = { children: title, ...options }\n\n    if (this.current) {\n      this.queue.push(props)\n      return\n    }\n\n    this._addCurrent(props)\n  }\n\n  show (title: string, options?: SnackItemType): void {\n    this._updateCurrent({ children: title, ...options })\n  }\n\n  dismiss (): void {\n    this._removeCurrent()\n\n    if (!this._hasQueue()) {\n      return\n    }\n\n    const current = this.queue.shift()\n    this._addCurrent(current)\n  }\n}"]}